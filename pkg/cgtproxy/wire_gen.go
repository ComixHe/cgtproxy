// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cgtproxy

import (
	"github.com/black-desk/cgtproxy/pkg/cgtproxy/config"
	"github.com/google/wire"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func injectedComponents(configConfig *config.Config, sugaredLogger *zap.SugaredLogger) (*components, error) {
	cgroupRoot := provideCgroupRoot(configConfig)
	cGroupMonitor, err := provideCgrougMontior(cgroupRoot, sugaredLogger)
	if err != nil {
		return nil, err
	}
	bypass := provideBypass(configConfig)
	nftMan, err := provideNFTMan(cgroupRoot, bypass, sugaredLogger)
	if err != nil {
		return nil, err
	}
	cgtproxyChans := provideChans()
	v := provideInputChan(cgtproxyChans)
	routeManager, err := provideRuleManager(nftMan, configConfig, v, sugaredLogger)
	if err != nil {
		return nil, err
	}
	cgtproxyComponents := provideComponents(cGroupMonitor, routeManager)
	return cgtproxyComponents, nil
}

// wire.go:

var set = wire.NewSet(
	provideBypass,
	provideCgrougMontior,
	provideCgroupRoot,
	provideChans,
	provideComponents,
	provideInputChan,
	provideOutputChan,
	provideRuleManager,
	provideNFTMan,
)
