// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cgtproxy

import (
	"github.com/black-desk/cgtproxy/pkg/cgtproxy/config"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func injectedComponents(configConfig *config.Config, sugaredLogger *zap.SugaredLogger) (*components, error) {
	cgroupRoot := provideCgroupRoot(configConfig)
	watcher, err := provideWatcher(cgroupRoot, sugaredLogger)
	if err != nil {
		return nil, err
	}
	cgtproxyChans := provideChans()
	v := provideOutputChan(cgtproxyChans)
	cgroupMonitor, err := provideMonitor(v, watcher, cgroupRoot, sugaredLogger)
	if err != nil {
		return nil, err
	}
	bypass := provideBypass(configConfig)
	table, err := provideTable(cgroupRoot, bypass, sugaredLogger)
	if err != nil {
		return nil, err
	}
	v2 := provideInputChan(cgtproxyChans)
	routeManager, err := provideRuleManager(table, configConfig, v2, sugaredLogger)
	if err != nil {
		return nil, err
	}
	cgtproxyComponents := provideComponents(watcher, cgroupMonitor, routeManager)
	return cgtproxyComponents, nil
}
