table inet deepin-network-proxy {
        set bypass {
                type ipv4_addr;
        }
        set bypass6 {
                type ipv6_addr;
        }
        map cgroup-map-1 {
                type cgroupsv2 : verdict;
        }
        map cgroup-map-2 {
                type cgroupsv2 : verdict;
        }
        map cgroup-map-3 {
                type cgroupsv2 : verdict;
        }
        map cgroup-map-4 {
                type cgroupsv2 : verdict;
        }
        map cgroup-map-5 {
                type cgroupsv2 : verdict;
        }
        map cgroup-map-6 {
                type cgroupsv2 : verdict;
        }
        set bypass-cgroup-1 {
                type cgroupsv2;
        }
        set bypass-cgroup-2 {
                type cgroupsv2;
        }
        set bypass-cgroup-3 {
                type cgroupsv2;
        }
        set bypass-cgroup-4 {
                type cgroupsv2;
        }
        set bypass-cgroup-5 {
                type cgroupsv2;
        }
        set bypass-cgroup-6 {
                type cgroupsv2;
        }
        chain prerouting {
                type filter hook prerouting priority mangle; policy accept;
                ip daddr @bypass return
                ip6 daddr @bypass6 return
                socket cgroupv2 level 6 vmap @cgroup-map-6
                socket cgroupv2 level 5 vmap @cgroup-map-5
                socket cgroupv2 level 4 vmap @cgroup-map-4
                socket cgroupv2 level 3 vmap @cgroup-map-3
                socket cgroupv2 level 2 vmap @cgroup-map-2
                socket cgroupv2 level 1 vmap @cgroup-map-1
                accept
        }
        chain repeater-proxy-1 {
                meta l4proto tcp tproxy to :1088
        }
        chain repeater-proxy-2 {
                meta l4proto { tcp, udp } tproxy ip to :1088
        }
        chain repeater-proxy-3 {
                meta l4proto { tcp, udp } tproxy to :1088
        }
        chain clash {
                meta l4proto { tcp, udp } tproxy to :7893
        }
        chain output {
                type route hook output priority mangle; policy accept;
                ip daddr @bypass return
                ip6 daddr @bypass6 return 
                socket cgroupv2 level 6 @bypass-cgroup-6 return
                socket cgroupv2 level 5 @bypass-cgroup-5 return
                socket cgroupv2 level 4 @bypass-cgroup-4 return
                socket cgroupv2 level 3 @bypass-cgroup-3 return
                socket cgroupv2 level 2 @bypass-cgroup-2 return
                socket cgroupv2 level 1 @bypass-cgroup-1 return
                meta l4proto != { tcp, udp } return
                meta mark set 0x00000001
        }
}
